{"meta":{"title":"xiao啊菲-博客","subtitle":"生命中的钢笔","description":null,"author":"Cai","url":""},"pages":[{"title":"about","date":"2017-01-14T15:37:48.000Z","updated":"2017-01-14T15:40:05.000Z","comments":true,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":""},{"title":"category","date":"2017-01-14T15:30:29.000Z","updated":"2017-01-14T15:32:09.000Z","comments":true,"path":"category/index.html","permalink":"/category/index.html","excerpt":"","text":""},{"title":"","date":"2017-01-14T16:50:55.501Z","updated":"2017-01-14T16:50:55.501Z","comments":true,"path":"css/personal-style.css","permalink":"/css/personal-style.css","excerpt":"","text":"html.page-home { position: absolute; top: 0; left: 0; right: 0; bottom: 0; /*background-image: url('/images/bg.jpg');*/ background-color: #333; background-size: cover; background-position: center center; background-repeat: no-repeat; /*background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);*/ /*background-blend-mode: screen;*/ /*background: linear-gradient(to left, #5f2c82, #49a09d);*/ }"},{"title":"search","date":"2017-01-14T15:43:59.000Z","updated":"2017-01-14T15:52:10.000Z","comments":false,"path":"search/index.html","permalink":"/search/index.html","excerpt":"","text":""},{"title":"project","date":"2017-01-14T15:41:26.000Z","updated":"2017-01-14T16:46:52.000Z","comments":true,"path":"project/index.html","permalink":"/project/index.html","excerpt":"","text":""},{"title":"tag","date":"2017-01-14T15:32:43.000Z","updated":"2017-01-14T15:36:03.777Z","comments":false,"path":"tag/index.html","permalink":"/tag/index.html","excerpt":"","text":""}],"posts":[{"title":"XHR or Fetch","slug":"XHR-Fetch","date":"2017-02-01T07:22:18.000Z","updated":"2017-02-01T07:44:30.000Z","comments":true,"path":"2017/02/XHR-Fetch/","link":"","permalink":"/2017/02/XHR-Fetch/","excerpt":"","text":"XHR or Fetch API ?XHR or Fetch API ?传统 Ajax 已死，Fetch 永生","categories":[],"tags":[{"name":"ajax","slug":"ajax","permalink":"/tags/ajax/"},{"name":"Fetch","slug":"Fetch","permalink":"/tags/Fetch/"}]},{"title":"html5_flexbox","slug":"html5-flexbox","date":"2017-02-01T07:18:02.000Z","updated":"2017-02-01T08:21:14.000Z","comments":true,"path":"2017/02/html5-flexbox/","link":"","permalink":"/2017/02/html5-flexbox/","excerpt":"","text":"flex 实时查看器 Flexbox Playground 使用Flexible实现手淘H5页面的终端适配 Flex 布局教程：语法篇Flex 布局教程：实例篇","categories":[],"tags":[{"name":"响应式","slug":"响应式","permalink":"/tags/响应式/"},{"name":"flex","slug":"flex","permalink":"/tags/flex/"}]},{"title":"建站","slug":"build-host","date":"2017-02-01T03:37:50.000Z","updated":"2017-02-01T07:10:36.740Z","comments":true,"path":"2017/02/build-host/","link":"","permalink":"/2017/02/build-host/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"yarn","slug":"yarn","date":"2017-01-31T07:13:03.000Z","updated":"2017-01-31T08:01:07.671Z","comments":true,"path":"2017/01/yarn/","link":"","permalink":"/2017/01/yarn/","excerpt":"Yarn 的安装与使用","text":"Yarn 的安装与使用 安装使用NPM的方式安装123npm install -g yarn yarn --version 使用init我们新建一个文件夹yarn测试下 输入命令: yarn init add1yarn add gulp-less 如果加入具体版本可以后面写上@0.x.x 这样子 remove1yarn remove gulp-less","categories":[],"tags":[{"name":"yarn","slug":"yarn","permalink":"/tags/yarn/"}]},{"title":"sass笔记","slug":"sass-learn","date":"2017-01-26T02:03:16.000Z","updated":"2017-02-01T08:24:36.848Z","comments":true,"path":"2017/01/sass-learn/","link":"","permalink":"/2017/01/sass-learn/","excerpt":"","text":"听说现在很多sass的项目都用, 这个 Bourbon - A Lightweight Sass Tool Set sass文件组织Sass: Directory Structures That Help You Maintain Your Code知乎-你是如何去组织项目中的 Less/Sass 代码的 sass 基础入门SASS官方文档SASS参考手册SASS基础——十个常见的MixinsSASS使用总结 编程风格 nested：嵌套缩进的css代码，它是默认值。 expanded：没有缩进的、扩展的css代码。 compact：简洁格式的css代码。 compressed：压缩后的css代码。 变量使用$ 1234567$font-stack: Helvetica, sans-serif;$primary-color: #333;body &#123; font: 100% $font-stack; color: $primary-color;&#125; 如果变量需要镶嵌在字符串之中，就必须需要写在#{}之中。(下次见到 别觉得神奇) 12345678910111213 $side : left; .rounded &#123; border-#&#123;$side&#125;-radius: 5px; &#125;### 变量的算法```css body &#123; margin: (14px/2); top: 50px + 100px; right: $var * 10%; &#125; 嵌套12345678910 div &#123; hi &#123; color:red; &#125; &#125; a &#123; &amp;:hover &#123; color: #ffb3ff; &#125; &#125; 注释SASS共有两种注释风格。 标准的CSS注释 / comment / ，会保留到编译后的文件。 单行注释 // comment，只保留在SASS源文件中，编译后被省略。 “重要注释”。即使是压缩模式编译，也会保留这行注释，通常可以用于声明版权信息。 123 /*! 重要注释！ */ 导入文件@import命令，用来插入外部文件。 1 @import \"path/filename.scss\"; 如果插入的是.css文件，则等同于css的import命令。 @import “foo.css”; 代码重用@extendSASS允许一个选择器，继承另一个选择器。比如，现有class1： 123 .class1 &#123; border: 1px solid #ddd; &#125; class2要继承class1，就要使用@extend命令：1234 .class2 &#123; @extend .class1; font-size:120%; &#125; @mixin 混合指令使用@mixin命令，定义一个代码块。 1234 @mixin left &#123; float: left; margin-left: 10px; &#125; 使用@include命令，调用这个mixin。 123 div &#123; @include left; &#125; 向混合样式中导入内容 (Passing Content Blocks to a Mixin)在引用混合样式的时候，可以先将一段代码导入到混合指令中，然后再输出混合样式，额外导入的部分将出现在 @content标志的地方： 12345678910@mixin apply-to-ie6-only &#123; * html &#123; @content; &#125;&#125;@include apply-to-ie6-only &#123; #logo &#123; background-image: url(/logo.gif); &#125;&#125; 编译为 123* html #logo &#123; background-image: url(/logo.gif);&#125; 指定参数 12345678 @mixin left($value: 10px) &#123; float: left; margin-right: $value; &#125;&lt;!--使用的时候，根据需要加入参数：--&gt; div &#123; @include left(20px); &#125; 颜色函数1234 lighten(#cc3, 10%) // #d6d65c darken(#cc3, 10%) // #a3a329 grayscale(#cc3) // #808080 complement(#cc3) // #33c !default!defalt 表示默认值 sass 高级用法条件语句@if可以用来判断： 1234 p &#123; @if 1 + 1 == 2 &#123; border: 1px solid; &#125; @if 5 &lt; 3 &#123; border: 2px dotted; &#125; &#125; 配套的还有@else命令： 123456 @if lightness($color) &gt; 30% &#123; background-color: #000; &#125; @else &#123; background-color: #fff; &#125;` 循环@for12345@for $i from 1 to 10 &#123; .border-#&#123;$i&#125; &#123; border: #&#123;$i&#125;px solid blue; &#125; &#125; @while123456789101112131415161718 $i: 6; @while $i &gt; 0 &#123; .item-#&#123;$i&#125; &#123; width: 2em * $i; &#125; $i: $i - 2; &#125;``` ### @eacheach命令，作用与for类似：```css @each $member in a, b, c, d &#123; .#&#123;$member&#125; &#123; background-image: url(\"/image/#&#123;$member&#125;.jpg\"); &#125; &#125; 自定义函数123456 @function double($n) &#123; @return $n * 2; &#125; #sidebar &#123; width: double(5px); &#125; sass 面向对象css - 使用%123456789101112131415161718192021222324%button &#123; min-width: 100px; padding: 1em; border-radius: 1em;&#125;%twitter-background &#123; color: #fff; background: #55acee;&#125;%facebook-background &#123; color: #fff; background: #3b5998;&#125;.btn &#123; &amp;--twitter &#123; @extend %button; @extend %twitter-background; &#125; &amp;--facebook &#123; @extend %button; @extend %facebook-background; &#125;&#125; sass 与媒体查询通过@mixin 编写媒体查询语句Mixin to Manage Breakpoints使用Sass之更高级的媒体查询 Write Simple, Elegant and Maintainable Media Queries with SassSASS mixins I’m using right now 通过以上链接，以及如何实现 font-size 的响应式 使用 编辑好的媒体查询语句 ,来编辑通过font-size的响应式。因为我们不希望，每次改变窗口, root 的font-size 的有变化，而是通过一个临界值来进行变化。 通过@mixin 编写媒体查询语句定义 123456789101112131415161718192021222324//定义好节点后$breakpoints: ( \"sm\" : 767px, \"md\": 992px, \"lg\": 1200px) !default;@mixin resp($breakpoint) &#123; // If the key exists in the map @if map-has-key($breakpoints, $breakpoint) &#123; // Prints a media query based on the value @media (max-width: map-get($breakpoints, $breakpoint)) &#123; @content; &#125; &#125; // If the key doesn't exist in the map @else &#123; @warn \"Unfortunately, no value could be retrieved from `#&#123;$breakpoint&#125;`. \" + \"Available breakpoints are: #&#123;map-keys($breakpoints)&#125;.\"; &#125;&#125; 使用 1234567891011@import 'response/config.scss';body &#123; @include resp(md) &#123; color: blue &#125; @include resp(sma) &#123; color: lawngreen; &#125;&#125; 升级使用通过@mixin 虽然方便了，但配置起来也显得繁琐。 Sass媒体查询应该是这样 动态，可定义，可以随意增加断点 简洁，自然的语法，可以使用 &lt;=,&gt;=, &gt;,&lt; 比如@include media(“&gt;minWidth”) 自由组合，临时定义断点，可以组合多个断点，也可以临时自定义断点，比如@include media(“&gt;tablet”, “&lt;1280px”) 请看Eduardo Bouças和Hugo Giraudel的开源作品– include-media 结合 include-media 123456789101112131415161718192021222324252627282930313233343536373839404142//config.scss @mixin responsive($width) &#123; @if $width==sm &#123; @include media(\"&gt;phone\", \"&lt;=tablet\") &#123; @content; &#125; &#125; @else if $width==md &#123; @include media(\"&gt;tablet\", \"&lt;=desktop\") &#123; @content; &#125; &#125; @else if $width==lg &#123; @include media(\"&gt;desktop\" ) &#123; @content; &#125; &#125; //@else &#123; //@warn \"Unfortunately, no value could be retrieved from `#&#123;$breakpoint&#125;`. \" //+ \"Available breakpoints are: #&#123;map-keys($breakpoints)&#125;.\"; //&#125; &#125;//index.scss@import 'response/include_media.scss';@import 'response/config.scss';body &#123; @include responsive(sm)&#123; color: blue &#125; @include responsive(md)&#123; color: red &#125; @include responsive(lg)&#123; color: lightyellow &#125;&#125; 最后生成 1234567891011@media (min-width: 321px) and (max-width: 768px) &#123; body &#123; color: blue; &#125; &#125;@media (min-width: 769px) and (max-width: 1024px) &#123; body &#123; color: red; &#125; &#125;@media (min-width: 1025px) &#123; body &#123; color: lightyellow; &#125; &#125;","categories":[],"tags":[{"name":"sass","slug":"sass","permalink":"/tags/sass/"}]},{"title":"JavaScript 模块化","slug":"js-module","date":"2017-01-25T13:48:19.000Z","updated":"2017-01-25T14:42:25.000Z","comments":true,"path":"2017/01/js-module/","link":"","permalink":"/2017/01/js-module/","excerpt":"","text":"JavaScript 模块化七日谈JavaScript 模块化简述 Node中没搞明白require和import，你会被坑的很惨讲述现在模块记载，以及es6的模块加载和node的区别， 浅谈 JavaScript 模块化编程","categories":[],"tags":[{"name":"js","slug":"js","permalink":"/tags/js/"},{"name":"module","slug":"module","permalink":"/tags/module/"}]},{"title":"chrome_plug","slug":"chrome-plug","date":"2017-01-25T13:45:16.000Z","updated":"2017-01-25T13:46:25.000Z","comments":true,"path":"2017/01/chrome-plug/","link":"","permalink":"/2017/01/chrome-plug/","excerpt":"","text":"Awesome Chrome 插件集锦","categories":[],"tags":[]},{"title":"es6_learn","slug":"es6-learn","date":"2017-01-24T14:29:03.000Z","updated":"2017-01-24T14:29:45.168Z","comments":true,"path":"2017/01/es6-learn/","link":"","permalink":"/2017/01/es6-learn/","excerpt":"","text":"ECMAScript 6 入门","categories":[],"tags":[{"name":"es6","slug":"es6","permalink":"/tags/es6/"}]},{"title":"typescript_learn","slug":"typescript-learn","date":"2017-01-24T14:12:19.000Z","updated":"2017-01-24T14:13:28.558Z","comments":true,"path":"2017/01/typescript-learn/","link":"","permalink":"/2017/01/typescript-learn/","excerpt":"","text":"TypeScript 入门教程","categories":[],"tags":[{"name":"typescript","slug":"typescript","permalink":"/tags/typescript/"}]},{"title":"css","slug":"css","date":"2017-01-24T06:43:54.000Z","updated":"2017-01-24T07:05:38.000Z","comments":true,"path":"2017/01/css/","link":"","permalink":"/2017/01/css/","excerpt":"","text":"css 模块化css 模块化 css 常用样式html高度不高内容高度不够时，footer 依然显示到最下面大概有这样的 html 结构123&lt;div id=\"content\"&gt;&lt;/div&gt;&lt;div id=\"footer\"&gt;&amp;copy; Brook.inc&lt;/div&gt; 1234567891011121314151617html &#123; height: 100%;&#125;$footer-height: 30px;body &#123; min-height: 100%; display: flex; flex-direction: column;&#125;#content &#123; flex: 1;&#125;#footer &#123; line-height: $footer-height; text-align: center;&#125; 不定宽高的垂直水平居中 flex12345.center-flex &#123; display: flex; justify-content: center; align-items: center;&#125; transform 123456.center-transform &#123; img &#123; position: relative; left: 50%; top: 50%; transform: translate(-50%, -50%); &#125;&#125; table-cell 1234.center-tb-cell &#123; display: table-cell; text-align: center; vertical-align: middle;&#125; :after，兼容性也不错可以，不想用 table-cell 时可以用 1234567891011.center-ib &#123; text-align: center; &amp;::after &#123; content: ''; display: inline-block; vertical-align: middle; height: 100%; &#125; img &#123; vertical-align: middle; &#125;&#125; 移动端差用cssTap highlight点击时高亮背景 12345678.item &#123; -webkit-tap-highlight-color: rgba(0,0,0,0); // 隐藏系统自带的背景 // add `ontouchstart` attribte on body // to allow :active work (if :active not work) &amp;:active &#123; background: #ECECEC &#125;&#125; 只添加上面的样式，:active 在移动端不一定（已经引入 zepto 的已经包含下面的 js 了）生效，需要下面的js 12document.body.addEventListener('touchstart', function() &#123;&#125;, false);// 也可以直接在body上添加 `ontouchstart` 属性， Half pixel border -移动端半像素的边框 :after + scale(0.5) (可以是某一到两个边，或者全部边(支持圆角)) svg background svg border-image Cells移动端常用的 cells 布局 平滑滚动smooth scroll in webkit 1-webkit-overflow-scrolling: touch;","categories":[],"tags":[]},{"title":"web 移动端笔记","slug":"webmobile","date":"2017-01-24T06:42:51.000Z","updated":"2017-02-03T06:50:50.000Z","comments":true,"path":"2017/01/webmobile/","link":"","permalink":"/2017/01/webmobile/","excerpt":"","text":"链接收集移动端开发所需要的一些资源与小技巧移动端开发者福利-免费收费api收藏 移动端滚动穿透问题完美解决方案 #移动端适配 移动端适配链接移动端全兼容的flexbox速成班恬恬移动端适配方法合集移动web适配方案动态计算版如何打造一个高效适配的H5移动端适配页面快速搭建 移动端css框架Mobi.css flex.css简洁的api，熟悉的属性值，入门毫无压力。在html中采用属性的方式布，将布局和css进行分离，清晰的布局结构让你更容易维护，可以在不更改css的情况下更改布局。特别是在React中使用data-flex属性布局，维护起来更加的方便。 下拉刷新yodfz/m-dropload – 看看其设计思路 （待定） mobile dropload.专为移动端设计的下拉刷新，原生为主，不需要其他框架库的支持。 css1-webkit-overflow-scrolling: touch","categories":[],"tags":[{"name":"webMobile","slug":"webMobile","permalink":"/tags/webMobile/"},{"name":"移动","slug":"移动","permalink":"/tags/移动/"},{"name":"sum","slug":"sum","permalink":"/tags/sum/"}]},{"title":"js_bridge","slug":"js-bridge","date":"2017-01-24T06:24:04.000Z","updated":"2017-01-24T06:33:01.864Z","comments":true,"path":"2017/01/js-bridge/","link":"","permalink":"/2017/01/js-bridge/","excerpt":"","text":"http://www.jianshu.com/p/3946605109ed","categories":[],"tags":[]},{"title":"","slug":"zhengze","date":"2017-01-18T16:23:23.231Z","updated":"2017-01-18T16:23:34.846Z","comments":true,"path":"2017/01/zhengze/","link":"","permalink":"/2017/01/zhengze/","excerpt":"","text":"1/\\d+(\\.\\d+)?/ 数字","categories":[],"tags":[]},{"title":"canvas_learn","slug":"canvas-learn","date":"2017-01-09T15:30:31.000Z","updated":"2017-01-24T06:17:54.012Z","comments":true,"path":"2017/01/canvas-learn/","link":"","permalink":"/2017/01/canvas-learn/","excerpt":"","text":"学习链接五分钟学会 Canvas 基础五分钟学会 Canvas 基础 二Canvas tutorial wait如何实现Canvas图像的拖拽、点击等操作 - Darly如何实现Canvas图像的拖拽、点击等操作 使用1234567&lt;canvas id=\"stockGraph\" width=\"150\" height=\"150\"&gt; current stock price: $3.15 +0.15&lt;/canvas&gt;&lt;canvas id=\"clock\" width=\"150\" height=\"150\"&gt; &lt;img src=\"images/clock.png\" width=\"150\" height=\"150\" alt=\"\"/&gt;&lt;/canvas&gt; canvas 默认样式的宽度和高度 是 300px * 150px。 判断是否支持画布12345678var canvas = document.getElementById(&apos;tutorial&apos;);if (canvas.getContext)&#123; var ctx = canvas.getContext(&apos;2d&apos;); // drawing code here&#125; else &#123; // canvas-unsupported code here&#125; 设置画布大小123&lt;canvas id=\"canvas_1\"&gt; 我们在设置 canvas 之前需要首先监测用户电脑是否支持 canvas&lt;/canvas&gt; 如果通过style. 来进行画布大小设置，*画布变大，内容也相应的变大，被拉伸了。 123456//错误示范 var canvas_1 = document.getElementById(\"canvas_1\"); // 设置宽度和高度,但是这种写法会造成额外的问题 // 画布会拉伸 // canvas_1.style.width = \"500px\"; // canvas_1.style.height = \"500px\"; 推荐写法 画布变大 内容不变 12canvas.setAttribute(&apos;width&apos;,400);//注意，不要加 pxcanvas.setAttribute(&apos;height&apos;,400); 适配屏幕分辨率12345678//原本为200px*200px 的画布 if(window.devicePixelRatio ==2 )&#123;//设置画大小canvas.setAttribute('width',400);canvas.setAttribute('height',400);//设置内容变大ctx.scale(2,2);&#125; 画布生成的内容最后就是jpg 的形式，所以在通过css调整显示 1234#canvas&#123; height:200px; width:200px;&#125; 坐标轴横轴向右是正，纵轴向下是正。 常用方法例子1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253var canvas = document.getElementById(&apos;tutorial&apos;);var ctx = canvas.getContext(&apos;2d&apos;);if (canvas.getContext)&#123; var ctx = canvas.getContext(&apos;2d&apos;); // drawing code here&#125; else &#123; // canvas-unsupported code here&#125;//填充属性ctx.fillStyle = &quot;rgb(200,0,0)&quot;;ctx.fillStyle = &quot;rgba(0, 0, 200, 0.5)&quot;;//填充圆ctx.fillRect (10, 10, 50, 50);//画一个 xxx什么都型// 开始绘制ctx.beginPath();//设置绘制起点ctx.moveTo(100,100);//设置绘制下一个点ctx.lineTo(700,400);//设置绘制下一个点ctx.lineTo(400,100);//设置绘制下一个点ctx.lineTo(600,500);//结束绘制ctx.closePath();//设置线的宽度ctx.lineWidth = 10;//设置绘制的样式ctx.strokeStyle = &quot;red&quot;;//绘制点之间的线路ctx.stroke();// 设置填充样式ctx.fillStyle = &quot;green&quot;;// 填充当前视图ctx.fill();// 注意：所有的绘制相应属性全部应该放在 closePath 之前 点&amp;线moveTolineTo 12345678//设置绘制起点 ctx.moveTo(100,100); //设置绘制下一个点 ctx.lineTo(700,400); //设置绘制下一个点 ctx.lineTo(400,100); 线lineWidth 设置线的宽度lineJoin 设置返回所创建边角的类型，当两条线交汇时。 bevel 创建斜角 round 创建圆角 miter 默认，创建尖角 绘制fill() 填充 canvas 当前路径stroke() 填充 canvas 当前路径绘制边框strokeRect(float x,float y,float width,float height) 绘制一个矩形边框fillRect(float x,float y,float width,float height) 填充一个矩形边框 绘制风格fillStyle() 设置填充 canvas 路径所使用的填充风格strokeStyle() 设置绘制 canvas 路径的填充风格lineWidth() 设置笔触线条的宽度 12ctx.fillStyle = \"rgb(200,0,0)\";ctx.fillStyle = \"rgba(0, 0, 200, 0.5)\"; 画圆arc(x, y, radius, startAngle, endAngle, anticlockwise)arcTo(x1, y1, x2, y2, radius) 12345678910111213141516171819for(var i=0;i&lt;4;i++)&#123; for(var j=0;j&lt;3;j++)&#123; ctx.beginPath(); var x = 25+j*50; // x coordinate var y = 25+i*50; // y coordinate var radius = 20; // Arc radius var startAngle = 0; // Starting point on circle var endAngle = Math.PI+(Math.PI*j)/2; // End point on circle var anticlockwise = i%2==0 ? false : true; // clockwise or anticlockwise ctx.arc(x, y, radius, startAngle, endAngle, anticlockwise); if (i&gt;1)&#123; ctx.fill(); &#125; else &#123; ctx.stroke(); &#125; &#125; &#125; 绘制字体MDN-Drawing textfillText(String Text, float x, float y, [float maxWidth]) 填充字符串strokeText(String Text, float x, float y, [float maxWidth]) 绘制字符串边框textAlign 设置绘制字符串的水平对齐方式(start、end、left、right、center等)textBaseAlign 设置绘制字符串的垂直对齐方式(top、hanging、middle、alphabetic、idecgraphic、bottom 等) Bezier and quadratic curvescp = control point.quadraticCurveTo(cp1x, cp1y, x, y)bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) 画图drawImageUsing imagesdrawImage(image, x, y)drawImage(image, x, y, width, height)drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight); 1234567891011121314function draw() &#123; var ctx = document.getElementById(&apos;canvas&apos;).getContext(&apos;2d&apos;); var img = new Image(); img.onload = function()&#123; ctx.drawImage(img,0,0); ctx.beginPath(); ctx.moveTo(30,96); ctx.lineTo(70,66); ctx.lineTo(103,76); ctx.lineTo(170,15); ctx.stroke(); &#125;; img.src = &apos;https://mdn.mozillademos.org/files/5395/backdrop.png&apos;;&#125; Parameters1234567var img = new Image(); img.src = &apos;https://mdn.mozillademos.org/files/222/Canvas_createpattern.png&apos;; img.onload = function () &#123; var pattern = ctx.createPattern(img, &apos;repeat&apos;); ctx.fillStyle = pattern; ctx.fillRect(0, 0, 400, 400); &#125;; 透明globalAlpha =0.1 小案例时钟An animated clock 画一个笑脸 并通过 requestAnimationFram 添加动画1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556var canvas = document.getElementById(&apos;canvas&apos;);var ctx = canvas.getContext(&apos;2d&apos;);var speed = 4;var x = 0;var draw;if (window.devicePixelRatio == 2) &#123; canvas.setAttribute(&apos;with&apos;, 1600); canvas.setAttribute(&apos;height&apos;, 400); ctx.scale(2, 2);&#125;function animate() &#123; reqAnimaFrame = window.mozRequestAnimationFram || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame; x += speed reqAnimaFrame(animate); if (x &lt;= 0 || x &gt;= 600) &#123; speed = -speed; &#125; draw();&#125;function draw() &#123; //清除 ctx.clearRect(0+x-10, 0, 220, 200); ctx.beginPath(); ctx.fillStyle = &quot;#f1f42e&quot;; ctx.strokeStyle = &apos;#00f&apos;; ctx.lineWidth = 3; ctx.arc(x+100, 100, 99, 0, Math.PI * 2); ctx.stroke(); ctx.fill(); ctx.beginPath(); ctx.moveTo(x+170, 100); ctx.arc(x+100, 100, 70, 0, Math.PI) ctx.stroke(); ctx.beginPath(); ctx.fillStyle = &apos;black&apos;; ctx.moveTo(x+60, 65); ctx.arc(x+60, 65, 12, 0, Math.PI * 2); ctx.fill(); ctx.beginPath(); ctx.fillStyle = &apos;black&apos;; ctx.moveTo(x+140, 65); ctx.arc(x+140, 65, 12, 0, Math.PI * 2); ctx.fill();&#125;animate(); save &amp;&amp; restore保存和摧毁状态 插件 真的是帅到不要不要的 插件啊 seuratjs Real Shadow sigmajs Canvas 做的滚动特效","categories":[],"tags":[{"name":"canvas","slug":"canvas","permalink":"/tags/canvas/"}]},{"title":"有趣的插件","slug":"fun","date":"2017-01-06T02:49:59.000Z","updated":"2017-02-02T02:17:37.669Z","comments":true,"path":"2017/01/fun/","link":"","permalink":"/2017/01/fun/","excerpt":"有趣的插件 好玩就好啊！！","text":"有趣的插件 好玩就好啊！！ 9款别出心裁的jQuery插件 Canvas、SVG 、CSS3大搜罗 翻书插件 turn.js 超赞！源自CODEPEN的25个最受欢迎的HTML/CSS代码惊人技术！2014年Codepen上最热门的100个code&amp;CSS片段代码css3 滑动 scroll-effects 声音buzz.js","categories":[],"tags":[{"name":"amusing","slug":"amusing","permalink":"/tags/amusing/"}]},{"title":"webfont","slug":"webfont","date":"2017-01-03T02:23:08.000Z","updated":"2017-02-01T07:21:28.442Z","comments":true,"path":"2017/01/webfont/","link":"","permalink":"/2017/01/webfont/","excerpt":"","text":"web font 终极解决方案 fontSpider字蛛一般一个中文字体包就3m以上，但又不是全部字体都需要，所以需要通过工具，提取字体。 在gulp 中的安装、使用npm install gulp-font-spider --save-dev 123456789var gulp = require( 'gulp' );var fontSpider = require( 'gulp-font-spider' );gulp.task('fontspider', function() &#123; return gulp.src('./index.html') .pipe(fontSpider());&#125;);gulp.task('defualt', ['fontspider']); 1234567891011121314151617/*声明 WebFont*/@font-face &#123; font-family: 'pinghei'; src: url('../font/pinghei.eot'); src: url('../font/pinghei.eot?#font-spider') format('embedded-opentype'), url('../font/pinghei.woff') format('woff'), url('../font/pinghei.ttf') format('truetype'), url('../font/pinghei.svg') format('svg'); font-weight: normal; font-style: normal;&#125;/*使用选择器指定字体*/.home h1, .demo &gt; .test &#123; font-family: 'pinghei';&#125; 咋看下好像工具是那么的简单好用啊 ，不过还是得根据具体的项目来进行调整。工具中的代码 是css文件相对路径与html文件。如果项目中css使用的文件就绝对路径，就需要通过 fontSpider字蛛提供的工具，进行map啦 修改为绝对路径通过查看 fontSpider字蛛的api 123456/** * 映射资源路径 - 与 `map` 参数互斥 * @param &#123;String&#125; 旧文件地址 * @return &#123;String&#125; 新文件地址 */ resourceMap: function(file) &#123;&#125;, resourceMap 方法得到的file 为html中 link的 src属性的值 如`","categories":[],"tags":[{"name":"gulp","slug":"gulp","permalink":"/tags/gulp/"},{"name":"webFont","slug":"webFont","permalink":"/tags/webFont/"}]},{"title":"html5笔记","slug":"html5-note","date":"2016-12-30T09:57:50.000Z","updated":"2017-02-01T07:11:09.000Z","comments":true,"path":"2016/12/html5-note/","link":"","permalink":"/2016/12/html5-note/","excerpt":"","text":"html5笔记HTML5+CSS3整体回顾 表单停止默认验证novalidate&lt;form name=&quot;myForm&quot; novalidate&gt;&lt;/form&gt;","categories":[],"tags":[{"name":"html5","slug":"html5","permalink":"/tags/html5/"}]},{"title":"responsive","slug":"responsive","date":"2016-12-28T02:42:08.000Z","updated":"2017-01-26T07:33:09.560Z","comments":true,"path":"2016/12/responsive/","link":"","permalink":"/2016/12/responsive/","excerpt":"","text":"响应式自适应网页设计（Responsive Web Design） 利用媒体查询 减少小屏幕加载图片，文字12345678910111213@media all and( min-width:53.75em)&#123; header[role=\"banner\"] .inner&#123; background: url('../image/12.png'); &#125; //在大视图中加载字体&#125;@media all and(max-width: 53.75em)&#123; header[role=\"banner\"] .inner&#123; background: none; &#125;&#125; 通过判断属性来修改样式或者参考 Link 1234567891011var nav= document.getElementById('nav');var navItem= nav.getElementsByTagName('li');// is it floated?var floated = navItem[0].currentStyle? navItem[0].currentStyle['float']: document.defaultView.getComputedStyle(navItem[0],null).getPropertyValue('float'); //parseInt(window.getComputedStyle(indicator).getPropertyValue('z-index'), 10); if( floated !='left')&#123; ...&#125; matchMediamatchMedia 是js自带方法 12345if (window.matchMedia(\"(min-width: 400px)\").matches) &#123; /* the viewport is at least 400 pixels wide */&#125; else &#123; /* the viewport is less than 400 pixels wide */&#125;","categories":[],"tags":[{"name":"响应式","slug":"响应式","permalink":"/tags/响应式/"}]},{"title":"响应式图片","slug":"responsive-img","date":"2016-12-28T02:33:26.000Z","updated":"2017-01-26T07:17:14.462Z","comments":true,"path":"2016/12/responsive-img/","link":"","permalink":"/2016/12/responsive-img/","excerpt":"","text":"响应式图片使用响应式图像","categories":[],"tags":[{"name":"js","slug":"js","permalink":"/tags/js/"},{"name":"img","slug":"img","permalink":"/tags/img/"},{"name":"css","slug":"css","permalink":"/tags/css/"}]},{"title":"js_Utils","slug":"js-Utils","date":"2016-12-28T02:01:23.000Z","updated":"2017-02-01T08:40:26.182Z","comments":true,"path":"2016/12/js-Utils/","link":"","permalink":"/2016/12/js-Utils/","excerpt":"","text":"JavaScript 模块化七日谈 Js 常用代码 1234567891011121314var Utils =&#123; classToggle : function (element,tclass) &#123; var classes = element.className, pattern = new RegExp(tclass); var hasClass = pattern.test.(classes); //toggle the class classes = hasClass? classes.repace(pattern,\"\"): classes + \" \" + tclass; element.className = classes; &#125;&#125; 优化滚动常用在自动收藏滚动条 Auto-Hiding Navigationtext123456789var scrolling = false;$(window).on(&apos;scroll&apos;, function()&#123; if( !scrolling ) &#123; scrolling = true; (!window.requestAnimationFrame) ? setTimeout(autoHideHeader, 250) : requestAnimationFrame(autoHideHeader); &#125;&#125;);","categories":[],"tags":[{"name":"js","slug":"js","permalink":"/tags/js/"},{"name":"code","slug":"code","permalink":"/tags/code/"}]},{"title":"NODE 归纳","slug":"node-sum","date":"2016-12-24T03:02:56.000Z","updated":"2017-01-14T15:34:14.948Z","comments":true,"path":"2016/12/node-sum/","link":"","permalink":"/2016/12/node-sum/","excerpt":"","text":"流的学习","categories":[{"name":"node","slug":"node","permalink":"/categories/node/"}],"tags":[{"name":"node","slug":"node","permalink":"/tags/node/"}]},{"title":"VSCode插件推荐","slug":"vscode-plugins","date":"2016-12-24T02:21:48.000Z","updated":"2016-12-24T02:40:18.991Z","comments":true,"path":"2016/12/vscode-plugins/","link":"","permalink":"/2016/12/vscode-plugins/","excerpt":"","text":"vscode插件推荐 REST Client vscode-fileheader Visual Studio Code Settings Sync，主要用来同步家里和公司的vscode配置的。 Debugger for Chrome，在Chrome浏览器中调试。 Debugger for Firefox，在Firefox浏览器中调试。 TSLint | Visual Studio Marketplace，校验ts语法。 Document This，目前vscode上最好的ts注释插件。 Bookmarks | Visual Studio Marketplace，书签没有太大作用，有时候做个标记有点用。 vscode-todo | Visual Studio Marketplace，todo注释，但是在mac上必须设置语言才可以。 TypeScript | Visual Studio Marketplace，typescript必备插件。 Can I Use | Visual Studio Marketplace，检测特性是否可用，用了typescript我就很少用了。 npm | Visual Studio Marketplace，npm相关命令，集成了终端后，我就很少用了。 File Peek | Visual Studio Marketplace，预览文件，一般看模块时用到。 Gulp Snippets，写gulp时用到。 Dash | Visual Studio Marketplace，查询API，需要先装Dash软件。应该只能用在mac平台上。 https://marketplace.visualstudio.com/items/GregorBiswanger.json2ts，快速生成一个typescript接口。 CodeMetrics | Visual Studio Marketplace，有助于我重构代码。 Emoji | Visual Studio Marketplace，写注释使用，显得轻松一些。 #链接[知乎-Visual Studio Code有哪些你常用的插件](https://www.zhihu.com/question/40640654?sort=created）","categories":[],"tags":[]},{"title":"summary","slug":"summary","date":"2016-12-21T13:49:44.000Z","updated":"2017-01-24T14:59:40.000Z","comments":true,"path":"2016/12/summary/","link":"","permalink":"/2016/12/summary/","excerpt":"","text":"#插件cookie js-cookiejq-插件断续器easy-ticker Slideshows Vegas is a jQuery/Zepto plugin to add beautiful backgrounds and Slideshows to DOM elements. markdownMarkItUp! Boost your textareas. ES6learn ES6 Hybrid浅谈Hybrid技术的设计与实现 前端名人叶小钗 github 昵称：草珊瑚 –园龄：9年1个月 Samaritans 前端学习mozilla –Demos of open web technologies 别人的前端资源汇总推荐-Front-End-Develop-Guide 前端开发指南 简书-史上最全的前端资源大汇总简书-最全前端资源汇集简书-目前为止，GitHub上最全的前端资源汇总 #learn css25个CSS3 渐变和动画效果教程 js13款实用的JS插件&amp;前端资源 插件jssuperplaceholder.js 输入框架","categories":[],"tags":[{"name":"summary","slug":"summary","permalink":"/tags/summary/"}]},{"title":"node.js中module.export 和 export方法的区别","slug":"node-exports","date":"2016-12-18T04:29:25.000Z","updated":"2017-01-15T15:49:41.816Z","comments":true,"path":"2016/12/node-exports/","link":"","permalink":"/2016/12/node-exports/","excerpt":"Node.js Module - exports vs module.exports","text":"Node.js Module - exports vs module.exports node.js中module.export 和 export方法的区别module.export 覆盖 export123exports.name = function() &#123; console.log('My name is Lemmy Kilmister');&#125;; 在另一个文件中你这样引用 12var rocker = require('./rocker.js');rocker.name(); // 'My name is Lemmy Kilmister' Module.exports才是真正的接口，exports只不过是它的一个辅助工具。 最终返回给调用的是Module.exports而不是exports。所有的exports收集到的属性和方法，都赋值给了Module.exports。当然，这有个前提，就是Module.exports本身不具备任何属性和方法。如果，Module.exports已经具备一些属性和方法，那么exports收集来的信息将被忽略。 1234module.exports = 'ROCK IT!';exports.name = function() &#123; console.log('My name is Lemmy Kilmister');&#125;; 再次引用执行rocker.js 12var rocker = require('./rocker.js');rocker.name(); // TypeError: Object ROCK IT! has no method 'name' 如何使用 如果没有显式的给Module.exports设置任何属性和方法，那么exports设置给Module.exports的属性。 下面例子中，你的模块是一个类： 1234567module.exports = function(name, age) &#123; this.name = name; this.age = age; this.info = function() &#123; console.log(this.name +' is '+ this.age +' years old'); &#125;;&#125;; 1234var Cai = require('./cai.js');var cai = new Cai('cai', 18);cai.info(); // cai is 18 years old 下面例子中，你的模块是一个数组： 1module.exports = ['Lemmy Kilmister', 'Ozzy Osbourne', 'Ronnie James Dio', 'Steven Tyler', 'Mick Jagger']; 12var ary = require('./array.js');console.log('Rockin in heaven: ' + ary[2]); //Rockin in heaven: Ronnie James Dio 模块是一个特定的类型就用Module.exports。模块是一个典型的“实例化对象”就用exports。 给Module.exports添加属性类似于给exports添加属性。例如： 123456789&lt;!--不推荐啦--&gt;module.exports.name = function() &#123; console.log('My name is Lemmy Kilmister');&#125;;//同样，exports是这样的exports.name = function() &#123; console.log('My name is Lemmy Kilmister');&#125;; 12module.exports.age = 68;exports.name = 'Lemmy Kilmister'; 12var rocker = require('./rocker.js');console.log('%s is %s', rocker.name, rocker.age); // Lemmy Kilmister is 68 错误示范 12345678module.exports = 'LOL';module.exports.age = 68;exports.name = 'Lemmy Kilmister';ormodule.exports.age = 68;exports.name = 'Lemmy Kilmister';module.exports = 'WTF';//the order doesn't matter, rocker.age and rocker.name will now be undefined.","categories":[],"tags":[{"name":"node","slug":"node","permalink":"/tags/node/"}]},{"title":"build_gulp","slug":"build-gulp","date":"2016-12-17T02:39:18.000Z","updated":"2017-01-15T15:48:26.794Z","comments":true,"path":"2016/12/build-gulp/","link":"","permalink":"/2016/12/build-gulp/","excerpt":"gulp的使用以及项目构建 gulp-stsrtBuilding With Gulp","text":"gulp的使用以及项目构建 gulp-stsrtBuilding With Gulp gulp插件推荐，无敌好用gulp使用小结) 其他有人用es6写 gulp 文件?!!其实gulp 运行与node ，node支持es6,但还没能支持import语法。可以看看别人的思路 但是还是不建议这样写 插件browsersync css 压缩cssnanoautoprefixer img 用这个更好 gulp-image -gulp教程之gulp-imagemin 雪碧图gulp.spritesmith-multi (根据文件夹生成多个图)、 gulp.spritesmith 教程gulp.spritesmithgulp.spritesmith 同过其他插件生成多个图 12345678910gulp.task('spritesmith',['clean'],function()&#123; return gulp.src('src/spriteTest/images/*.png') .pipe(spritesmith(&#123; imgName:'images/sprite20161010.png', //保存合并后图片的地址 cssName:'css/sprite.css', //保存合并后对于css样式的地址 padding:20, algorithm:'binary-tree', cssTemplate:\"src/spriteTest/handlebarsStr.css\" &#125;)) .pipe(gulp.dest('//雪碧图gulp.spritesmith gulp.spritesmith-multi 的使用gulp.spritesmith-multi 给予gulp.spritesmith 说以大部分配置都是共同的 默认配置为 123456var options = &#123; imgName: sprite + '.png', cssName: sprite + '.css', cssTemplate: builtin.css, cssSpritesheetName: 'sp-' + sprite,&#125; 作者提供的修改配置的方法为： 12345678// Generate our spritesheet var spriteData = gulp.src('default/**/*.png') .pipe(spritesmith(&#123; spritesmith: function (options) &#123; options.imgPath = '../images/' + options.imgName //在css中的图片地址 &#125; &#125;)) options.imgPath 这个属性很重要啊 因为每个项目可能文件架构等不同，css和图片的位置不一样 或者说 我是想把图片放上7牛云？？ 那也是说不定的。 Gulp+fontspider按需压缩中文字体字蛛Gulp+fontspider按需压缩中文字体 MD5 和静态文件上传到cdntext 区分开发模式和生产模式12345678var gulp = require('gulp');gulp.task('env:dev', function () &#123; return process.env.NODE_ENV ='development' ;&#125;);gulp.task('env:build', function () &#123; return process.env.NODE_ENV = 'production';&#125;); 在gulpfile.js 中引用 123456789gulp.task('default', ['env:dev','ejs','sass','javascript','watch'], function() &#123; console.log(\"default\");&#125;);gulp.task('build', ['env:build','ejs','sass','javascript','watch'], function() &#123; console.log(\"default\");&#125;); 在task中应用 1process.env.NODE_ENV // 关于触发bowerSync自动刷新的一些疑问和解决方法gulp 中通过watch 方法监控文件 bowersync.js 1234var browserSync = require('browser-sync').create()module.exports = browserSync watch.js 1234567891011var browserSync = require('./bowersync'); //sass gulp.watch(config_sass.paths.src , ['sass'],function (event) &#123; browserSync.reload(); &#125;);// ejs gulp.watch([ config_ejs.paths.src, config_ejs.paths.json], ['ejs']) .on('change',handle); sass 直接在watch方法中添加触发函数，可以在执行完 sass流程后 除非刷新 ejs 如果使用和sass一样的方法 ，没有触发。改为通过 on方法后，可以出发刷新操作。但 on方法是在进行 ejs流程 中 同时进行刷新。导致 ejs 还没生成好就已经刷新好了页面。 解决方法 12.pipe(gulp.dest(path_dist))// .pipe(browserSync.reload(&#123;stream:true&#125;)); 就是直接在pipe 方法中添加刷新操作。","categories":[],"tags":[{"name":"build","slug":"build","permalink":"/tags/build/"},{"name":"gulp","slug":"gulp","permalink":"/tags/gulp/"}]},{"title":"english","slug":"english","date":"2016-12-16T06:03:26.000Z","updated":"2016-12-31T05:30:58.000Z","comments":true,"path":"2016/12/english/","link":"","permalink":"/2016/12/english/","excerpt":"","text":"partial 局部的；偏爱的；不公平的","categories":[],"tags":[]},{"title":"waitRead.md","slug":"waitRead","date":"2016-12-16T05:24:54.000Z","updated":"2016-12-16T05:39:21.000Z","comments":true,"path":"2016/12/waitRead/","link":"","permalink":"/2016/12/waitRead/","excerpt":"","text":"#待续 一些指导看和做记录的文章 Bizhong Lan 的github/ES6Samples","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2016-12-14T04:48:53.397Z","updated":"2016-12-16T06:04:45.272Z","comments":true,"path":"2016/12/hello-world/","link":"","permalink":"/2016/12/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"web学习资源","slug":"webLearn","date":"2016-12-14T03:45:29.000Z","updated":"2017-01-31T07:12:40.886Z","comments":true,"path":"2016/12/webLearn/","link":"","permalink":"/2016/12/webLearn/","excerpt":"","text":"编辑书写规范-airbnb/javascript jsjs 学习 MDN–JavaScript 对象Javascript 设计模式读书笔记(二)——封装，简单的创建对象模式 moduleJavaScript 模块化七日谈JavaScript 模块化简述 微信WeIndex | 微信相关资源索引个基于 Gulp 高效、可定制的 Web 前端工作流 加载bowl 是一个用 localStorage 来缓存脚本和样式资源的加载器。 book外国人书籍 JavaScript开发的著名开源项目总结一些JavaScript开发的著名开源项目 总让人有想要模仿的欲望12","categories":[],"tags":[{"name":"sum","slug":"sum","permalink":"/tags/sum/"},{"name":"web","slug":"web","permalink":"/tags/web/"}]},{"title":"webpack","slug":"webpack","date":"2016-12-14T03:22:36.000Z","updated":"2017-01-24T14:12:53.436Z","comments":true,"path":"2016/12/webpack/","link":"","permalink":"/2016/12/webpack/","excerpt":"","text":"webpack踩坑之路 (2)——图片的路径与打包","categories":[],"tags":[{"name":"webpack","slug":"webpack","permalink":"/tags/webpack/"}]},{"title":"模块化开发-js","slug":"module-js","date":"2016-12-13T15:02:59.000Z","updated":"2016-12-14T03:24:52.000Z","comments":true,"path":"2016/12/module-js/","link":"","permalink":"/2016/12/module-js/","excerpt":"","text":"模块化开发模块化的话，首先看一下）这个系列视频（Modular JavaScript了解怎么用原生JavaScript实现模块化 然后可以看一下Addy Osmani关于模块化的这篇文章：Writing Modular JavaScript With AMD, CommonJS &amp; ES Harmony 例子123456789101112131415161718192021&lt;div class=\"container\"&gt; &lt;div class=\"row\"&gt; &lt;!-- peopelModel--&gt; &lt;div id=\"peopleModule\"&gt; &lt;h1&gt;People&lt;/h1&gt; &lt;input placeholder=\"name\" type=\"text\"&gt; &lt;button id=\"addPerson\"&gt;Add Person&lt;/button&gt; &lt;ul id=\"people\"&gt; &lt;script id=\"people-template\" type=\"text/template\"&gt; &#123;&#123;#people&#125;&#125; &lt;li&gt; &lt;span&gt;&#123;&#123;.&#125;&#125;&lt;/span&gt; &lt;i class=\"del\"&gt;X&lt;/i&gt; &lt;/li&gt; &#123;&#123;/people&#125;&#125; &lt;/script&gt; &lt;/ul&gt; &lt;/div&gt; &lt;!--end peopelModel --&gt; &lt;/div&gt;&lt;/div 12345678910111213141516171819202122232425262728293031323334353637383940414243444546var people = &#123; people: ['Will', 'Steve'], init: function() &#123; this.cacheDom(); this.bindEvents(); this.render(); &#125;, cacheDom: function() &#123; this.$el = $('#peopleModule'); this.$button = this.$el.find('button'); this.$input = this.$el.find('input'); this.$ul = this.$el.find('ul'); this.template = this.$el.find('#people-template').html(); &#125;, bindEvents: function() &#123; this.$button.on('click', this.addPerson.bind(this)); this.$ul.delegate('i.del', 'click', this.deletePerson.bind(this)); &#125;, render: function() &#123; var data = &#123; people: this.people, &#125;; this.$ul.html(Mustache.render(this.template, data)); &#125;, addPerson: function() &#123; var text = $.trim(this.$input.val()); if (text ==\"\") &#123; return false; &#125; else &#123; console.log(\"text\"); &#125; this.people.push(this.$input.val()); this.render(); this.$input.val(''); &#125;, deletePerson: function(event) &#123; var $remove = $(event.target).closest('li'); var i = this.$ul.find('li').index($remove); this.people.splice(i, 1); this.render(); &#125;&#125;;people.init();","categories":[],"tags":[{"name":"js","slug":"js","permalink":"/tags/js/"},{"name":"module","slug":"module","permalink":"/tags/module/"}]},{"title":"js模板文件开-mustache.js","slug":"template-mustache","date":"2016-12-13T07:32:12.000Z","updated":"2017-01-15T15:51:11.232Z","comments":true,"path":"2016/12/template-mustache/","link":"","permalink":"/2016/12/template-mustache/","excerpt":"","text":"Mustacne使用12345678var view = &#123; title: &quot;Joe&quot;, calc: function () &#123; return 2 + 4; &#125;&#125;;var output = Mustache.render(&quot;&#123;&#123;title&#125;&#125; spends &#123;&#123;calc&#125;&#125;&quot;, view); 搭配JQ123456789&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;body onload=\"loadUser()\"&gt;&lt;div id=\"target\"&gt;Loading...&lt;/div&gt;&lt;script id=\"template\" type=\"x-tmpl-mustache\"&gt;Hello &#123;&#123; name &#125;&#125;!&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 123456function loadUser() &#123; var template = $('#template').html(); Mustache.parse(template); // optional, speeds up future uses var rendered = Mustache.render(template, &#123;name: \"Luke\"&#125;); $('#target').html(rendered);&#125; if 判断1234567891011121314//view&#123; \"person\": false&#125;//templateShown.&#123;&#123;#person&#125;&#125;Never shown!&#123;&#123;/person&#125;&#125;//outputShown. 12345678910111213&#123; \"repos\": []&#125;//Template:&#123;&#123;#repos&#125;&#125;&lt;b&gt;&#123;&#123;name&#125;&#125;&lt;/b&gt;&#123;&#123;/repos&#125;&#125;&#123;&#123;^repos&#125;&#125;No repos :(&#123;&#123;/repos&#125;&#125;//Output:No repos :( 数组循环12345678//View:&#123; \"stooges\": [ &#123; \"name\": \"Moe\" &#125;, &#123; \"name\": \"Larry\" &#125;, &#123; \"name\": \"Curly\" &#125; ]&#125; 1234//Template:&#123;&#123;#stooges&#125;&#125;&lt;b&gt;&#123;&#123;name&#125;&#125;&lt;/b&gt;&#123;&#123;/stooges&#125;&#125; 12345//Output:&lt;b&gt;Moe&lt;/b&gt;&lt;b&gt;Larry&lt;/b&gt;&lt;b&gt;Curly&lt;/b&gt;&#125; 1234//View:&#123; \"musketeers\": [\"Athos\", \"Aramis\", \"Porthos\", \"D'Artagnan\"]&#125; 1234//Template:&#123;&#123;#musketeers&#125;&#125;* &#123;&#123;.&#125;&#125;&#123;&#123;/musketeers&#125;&#125; 123456//Output:* Athos* Aramis* Porthos* D&apos;Artagnan function123456789101112//View:&#123; \"beatles\": [ &#123; \"firstName\": \"John\", \"lastName\": \"Lennon\" &#125;, &#123; \"firstName\": \"Paul\", \"lastName\": \"McCartney\" &#125;, &#123; \"firstName\": \"George\", \"lastName\": \"Harrison\" &#125;, &#123; \"firstName\": \"Ringo\", \"lastName\": \"Starr\" &#125; ], \"name\": function () &#123; return this.firstName + \" \" + this.lastName; &#125;&#125; 1234//Template:&#123;&#123;#beatles&#125;&#125;* &#123;&#123;name&#125;&#125;&#123;&#123;/beatles&#125;&#125; 123456//Output:* John Lennon* Paul McCartney* George Harrison* Ringo Starr","categories":[],"tags":[{"name":"js","slug":"js","permalink":"/tags/js/"},{"name":"template","slug":"template","permalink":"/tags/template/"}]},{"title":"hexo","slug":"hexo","date":"2016-12-11T09:57:50.000Z","updated":"2017-02-03T07:14:51.000Z","comments":true,"path":"2016/12/hexo/","link":"","permalink":"/2016/12/hexo/","excerpt":"","text":"日常维护和使用搭建123$ hexo init cai_blog$ cd cai_blog$ npm install 生成静态文件、运行12345$ hexo clean$ hexo g$ hexo s// localhost:4000 配置网站的设置大部分都在_config.yml文件中，详细配置可以查看官方文档 title -&gt; 网站标题 subtitle -&gt; 网站副标题 description -&gt; 网站描述 author -&gt; 您的名字 language -&gt; 网站使用的语言 #主题 主题安装和使用参考-Hexo 主题设置 安装主题 1$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 修改_config.yml文件 theme: yilia 部署到Github使用github.io 以及自动部署插件hexo-deployer-git 配置在_config.yml中配置deploy 1234deploy: type: git repo: &lt;repository url&gt; branch: [branch] branch为分支，默认为master,可以不配置repo为仓库地址，在github上新建仓库后，可复制此地址 部署1$ hexo d 侧边栏123456# Headermenu: 主页: / 随笔: /tags/随笔/ cai: /categories/进阶/cai/ 自己分类。。 备份通过github分支使用hexo，如果换了电脑怎么更新博客？ 插件hexo-admin 使用文章摘要&lt;!-- more --&gt;&lt;!-- more --&gt;上面的内容就是显示在主页的摘要。 banner/photo文章开头添加123photo: - http://img.blog.csdn.net/20151129213701642banner: http://img.blog.csdn.net/2015112921370164 添加视频 ，音乐123&lt;iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&amp;id=25706282&amp;auto=0&amp;height=66\"&gt; &lt;/iframe&gt; Idina Menze和Caleb Hyles激情对唱Let It Go： 12345&lt;iframe height=498 width=510 src=\"http://player.youku.com/embed/XNjcyMDU4Njg0\" frameborder=0 allowfullscreen&gt; &lt;/iframe&gt; 修改代码高亮Hexo高级教程之代码高亮 HEXO 主题一个极简主义设计的 Hexo 主题 设置搜索1234# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'# url: http://yoursite.comurl: / #参考链接手把手教你使用Hexo + Github Pages搭建个人独立博客 Fexo 文档","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"/tags/hexo/"}]}]}